documentos = {'just plain boring'
              'entirely predictable and lacks energy'
              'no surprises and very few laughs'
              'very powerful'
              'the most fun film of the summer'
              };

%strjoin
%unique
%regexpa

% alínea a)
texto_unico = strjoin(documentos, ' ');

todas_palavras = strsplit(lower(texto_unico));

vocab = unique(todas_palavras);

% alínea b
matriz_contagem = zeros(length(documentos), length(vocab));

for i = 1:length(documentos)
    for j = 1:length(vocab)
        ocorrencias = regexpi(documentos{i}, vocab{j});
        matriz_contagem(i, j) = numel(ocorrencias);
    end
end

%alinea c

classes = categorical({'NEG','NEG','NEG','POS','POS'});

%alinea d

%P(-) e P(+)
P_POS = sum(classes =='POS')/length(classes);

P_NEG = sum(classes =='NEG')/length(classes);

total_pos = 0;
total_neg = 0;

for i = 1:length(classes)  
    for j = 1:length(vocab)  
        if (classes(i) == 'POS')  
            total_pos = total_pos + matriz_contagem(i,j);  
        elseif (classes(i) == 'NEG')  
            total_neg = total_neg + matriz_contagem(i,j);  
        end  
    end  
end  

% Cálculo de P("predictable" | +)  

j = find(strcmp(vocab, 'predictable'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'POS')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade  
disp('---------------');
disp('1');
pred_pos = (count + 1) / (total_pos + length(vocab));
disp(pred_pos); % Ajuste de Laplace

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cálculo de P("no" | +)  

j = find(strcmp(vocab, 'no'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'POS')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade
disp('---------------');
disp('2');
no_pos = (count + 1) / (total_pos + length(vocab));
disp(no_pos); % Ajuste de Laplace  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cálculo de P("fun" | +)  

j = find(strcmp(vocab, 'fun'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'POS')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade
disp('---------------');
disp('3');
fun_pos = (count + 1) / (total_pos + length(vocab));
disp(fun_pos); % Ajuste de Laplace  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cálculo de P("predictable " | -)  

j = find(strcmp(vocab, 'predictable'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'NEG')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade
disp('---------------');
disp('4');
pred_neg = (count + 1) / (total_neg + length(vocab));
disp(pred_neg); % Ajuste de Laplace  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cálculo de P("no " | -)  

j = find(strcmp(vocab, 'no'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'NEG')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade
disp('---------------');
disp('5');
no_neg = (count + 1) / (total_neg + length(vocab));
disp(no_neg); % Ajuste de Laplace

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cálculo de P("fun " | -)  

j = find(strcmp(vocab, 'fun'));
count = 0;  
for i = 1:length(classes)  
    if (classes(i) == 'NEG')   
        count = count + matriz_contagem(i, j);  
    
    end  
end  

% Cálculo da probabilidade
disp('---------------');
disp('6');
fun_neg = (count + 1) / (total_neg + length(vocab));
disp(fun_neg); % Ajuste de Laplace  

% frase de teste: predictable with no fun

Pfr_neg = pred_neg*no_neg*fun_neg*total_neg;
Pfr_pos = pred_pos*no_pos*fun_pos*total_pos;

if Pfr_pos>Pfr_neg
    disp('A mais provavel é a +')
else
    disp('A mais provavel é a -')
end
%% 
data = readcell("PL5Ex2(in).csv");    
class = categorical(data(2:end,end));
features = categorical(data(1,1:end-1));
words = data(2:end, 2:end-1);  
array = cell2mat(words);


% alínea b)
[n,m] = size(array);
test = randperm(n);

trainSize = 0.7*n;
trainIndices = test(1:trainSize); 
testIndices = test(trainSize+1:end); 

X_train = array(trainIndices, :);  
Y_train = class(trainIndices); 

X_test = array(testIndices, :);  
Y_test = class(testIndices);  

% alinea c)

numSPAM = sum(Y_train == 'SPAM');  
numOK = sum(Y_train == 'OK');  


totalEmails = length(Y_train);


P_SPAM = numSPAM / totalEmails;  
P_OK = numOK / totalEmails; 

fprintf('Probabilidade a priori de SPAM: %.4f\n', P_SPAM);
fprintf('Probabilidade a priori de OK: %.4f\n', P_OK);


P_word_given_SPAM = zeros(1, m);            % o m foi defenido em cima juntamente com o n
P_word_given_OK = zeros(1, m); 

for i = 1:m  
   
    P_word_given_SPAM(i) = sum(X_train(Y_train == 'SPAM', i)) / numSPAM;
    

    P_word_given_OK(i) = sum(X_train(Y_train == 'OK', i)) / numOK;
end


disp('Probabilidades condicionais de palavras dado SPAM:');
disp(P_word_given_SPAM);

disp('Probabilidades condicionais de palavras dado OK:');
disp(P_word_given_OK);





predictedClasses = categorical(repmat({'OK'}, length(Y_test), 1)); % Inicializar com 'OK'

for j = 1:length(Y_test)
    
    email = X_test(j, :);
    
    
    logP_SPAM = log(P_SPAM);  
    logP_OK = log(P_OK);      
    
    for i = 1:m
        if email(i) == 1
            logP_SPAM = logP_SPAM + log(P_word_given_SPAM(i));      % aqui estou a ver a contribuição de cada palavra
            logP_OK = logP_OK + log(P_word_given_OK(i));
        else
            logP_SPAM = logP_SPAM + log(1 - P_word_given_SPAM(i));  % caso não esteja estou a contar a contribuição de não estar
            logP_OK = logP_OK + log(1 - P_word_given_OK(i));
        end
    end
    

    if logP_SPAM > logP_OK
        predictedClasses(j) = 'SPAM';
    else
        predictedClasses(j) = 'OK';
    end
end

disp('Classes preditas para o conjunto de teste:');
disp(predictedClasses);


% detetar SPAM e ser SPAM é TP

TP = sum((predictedClasses == 'SPAM') & (Y_test == 'SPAM'));  % True Positive 
FP = sum((predictedClasses == 'SPAM') & (Y_test == 'OK'));    % Falso Positive
TN = sum((predictedClasses == 'OK') & (Y_test == 'OK'));      % True Negative 
FN = sum((predictedClasses == 'OK') & (Y_test == 'SPAM'));    % Falso Negative


precisao = TP / (TP + FP);
recall = TP / (TP + FN);
f1 = 2 * (precisao * recall) / (precisao + recall);


fprintf('Precisão: %.4f\n', precisao);
fprintf('Recall: %.4f\n', recall);
fprintf('F1 Score: %.4f\n', f1);

% alínea g
n_runs = 10;  

precision_vals = zeros(1, n_runs); 
recall_vals = zeros(1, n_runs);    

for run = 1:n_runs
    
    teste = randperm(n);
    x = teste(1:floor(0.7 * n));  
    y = teste(floor(0.7 * n) + 1:end);  
    train = array(x,:);
    test = array(y,:);
    Y_train = class(x);
    Y_test = class(y);
    
    
